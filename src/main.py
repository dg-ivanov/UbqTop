#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Thu Oct 10 00:33:49 2024
#

import wx

import wx.grid
import numpy as np
import wx.propgrid
from wx.propgrid import PropertyGrid
from pubsub import pub
import matplotlib

matplotlib.use('WXAgg')
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg as NavigationToolbar2Wx
import backend


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):

        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1600, 920))
        self.SetTitle("UbqTop")
        self.sb = self.CreateStatusBar()

        # Backend support
        self.annotation_param = [["Peak threshold", 0.002],
                                 ["Parent Z", 25],
                                 ["M/Z Accuracy, Th", 0.003],
                                 ["Detected isotope scores cutoff", 0.25],
                                 ["Detected isotope minimal scores", 1],
                                 ["Bayesian alpha", 0.05]]
        self.ppts = {}
        self.I_list = []
        self.peak_height = 0.002
        self.ims = None
        #Backend support ends

        #GUI Initialization
        self.main_panel = wx.Panel(self, wx.ID_ANY)

        #MPL Initializations

        #mass spectrum
        self.figure_spectrum = Figure(figsize=(1, 1), layout="constrained")
        self.axes_spectrum = self.figure_spectrum.add_subplot(111)
        self.canvas_spectrum = FigureCanvas(self.main_panel, wx.ID_ANY, self.figure_spectrum)
        self.toolbar_spectrum = NavigationToolbar2Wx(self.canvas_spectrum)

        #fragment map
        self.figure_fragment_map = Figure(figsize=(1, 1), layout="constrained")
        self.axes_fragment_map = self.figure_fragment_map.add_subplot(111)
        self.canvas_fragment_map = FigureCanvas(self.main_panel, wx.ID_ANY, self.figure_fragment_map)
        self.toolbar_fragment_map = NavigationToolbar2Wx(self.canvas_fragment_map)

        #seq coverage
        self.figure_seq_coverage = Figure(figsize=(1, 1), layout="constrained")
        self.axes_seq_coverage = self.figure_seq_coverage.add_subplot(111)
        self.canvas_seq_coverage = FigureCanvas(self.main_panel, wx.ID_ANY, self.figure_seq_coverage)
        self.toolbar_seq_coverage = NavigationToolbar2Wx(self.canvas_seq_coverage)

        #Managing panel initialization

        self.button_load_ms_file = wx.Button(self.main_panel, wx.ID_ANY, "1. Load spectrum ...")
        self.propgrid_processing_control = PropertyGrid(self.main_panel, wx.ID_ANY)
        self.button_load_config_file = wx.Button(self.main_panel, wx.ID_ANY, " 2. Load config from file ...")
        self.textctrl_isoform_encoder = wx.TextCtrl(self.main_panel, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.checkbox_a = wx.CheckBox(self.main_panel, wx.ID_ANY, "a")
        self.checkbox_b = wx.CheckBox(self.main_panel, wx.ID_ANY, "b")
        self.checkbox_c = wx.CheckBox(self.main_panel, wx.ID_ANY, "c")
        self.checkbox_x = wx.CheckBox(self.main_panel, wx.ID_ANY, "x")
        self.checkbox_y = wx.CheckBox(self.main_panel, wx.ID_ANY, "y")
        self.checkbox_z = wx.CheckBox(self.main_panel, wx.ID_ANY, "z")
        self.button_generate_IT = wx.Button(self.main_panel, wx.ID_ANY, "3. Generate Isoform Table")
        self.label_series_show = wx.StaticText(self.main_panel, wx.ID_ANY, " Show fragment series: ",
                                               style=wx.ALIGN_RIGHT)
        self.combobox_series_show = wx.ComboBox(self.main_panel, wx.ID_ANY)
        self.button_series_show = wx.Button(self.main_panel, wx.ID_ANY, "Show")
        self.grid_IT = wx.grid.Grid(self.main_panel, wx.ID_ANY, size=(1, 1))
        self.button_annotate_spectrum = wx.Button(self.main_panel, wx.ID_ANY, "4. Annotate Spectrum")
        self.button_open_scoring = wx.Button(self.main_panel, wx.ID_ANY, "5. Calculate scores ...")

        #Sizers initialization
        sizer_main = wx.BoxSizer(wx.HORIZONTAL)
        sizer_left_panel = wx.BoxSizer(wx.VERTICAL)
        sizer_right_panel = wx.BoxSizer(wx.VERTICAL)
        sizer_main.Add(sizer_left_panel, 1, wx.EXPAND, 0)
        sizer_main.Add(sizer_right_panel, 2, wx.EXPAND, 0)
        sizer_spectrum = wx.BoxSizer(wx.VERTICAL)
        sizer_spectrum.Add(self.toolbar_spectrum, 0, wx.EXPAND, 1)
        sizer_spectrum.Add(self.canvas_spectrum, 2, wx.EXPAND, 0)
        sizer_right_panel.Add(sizer_spectrum, 2, wx.EXPAND, 0)
        sizer_fragments_plots = wx.BoxSizer(wx.HORIZONTAL)
        sizer_frag_map = wx.BoxSizer(wx.VERTICAL)
        sizer_frag_map.Add(self.canvas_fragment_map, 1, wx.EXPAND, 0)
        sizer_frag_map.Add(self.toolbar_fragment_map, 0, wx.EXPAND, 0)
        sizer_frag_det = wx.BoxSizer(wx.VERTICAL)
        sizer_frag_det.Add(self.canvas_seq_coverage, 1, wx.EXPAND, 0)
        sizer_frag_det.Add(self.toolbar_seq_coverage, 0, wx.EXPAND, 0)
        sizer_fragments_plots.Add(sizer_frag_map, 2, wx.EXPAND, 0)
        sizer_fragments_plots.Add(sizer_frag_det, 1, wx.EXPAND, 0)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_8.Add(self.button_load_ms_file, 0, wx.EXPAND, 0)
        sizer_left_panel.Add(sizer_8, 1, wx.EXPAND, 0)
        sizer_8.Add(self.propgrid_processing_control, 1, wx.EXPAND, 0)
        sizer_top_right = wx.BoxSizer(wx.VERTICAL)
        sizer_top_right.Add(self.button_load_config_file, 0, wx.EXPAND, 0)
        sizer_top_right.Add(self.textctrl_isoform_encoder, 1, wx.EXPAND, 0)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7.Add(self.checkbox_a, 0, 0, 0)
        sizer_7.Add(self.checkbox_b, 0, 0, 0)
        sizer_7.Add(self.checkbox_c, 0, 0, 0)
        sizer_7.Add(self.checkbox_x, 0, 0, 0)
        sizer_7.Add(self.checkbox_y, 0, 0, 0)
        sizer_7.Add(self.checkbox_z, 0, 0, 0)
        sizer_7.Add(self.button_generate_IT, 1, 0, 0)
        sizer_top_right.Add(sizer_7, 0, wx.EXPAND, 0)
        sizer_left_panel.Add(sizer_top_right, 1, wx.EXPAND, 0)
        sizer_series_show = wx.BoxSizer(wx.HORIZONTAL)
        sizer_series_show.Add(self.label_series_show, 0, 0, 0)
        sizer_series_show.Add(self.combobox_series_show, 1, wx.EXPAND, 0)
        sizer_series_show.Add(self.button_series_show, 0, 0, 0)
        sizer_left_panel.Add(self.grid_IT, 1, wx.EXPAND, 0)
        sizer_left_panel.Add(self.button_annotate_spectrum, 0, wx.EXPAND, 0)
        sizer_left_panel.Add(sizer_series_show, 0, wx.EXPAND, 0)
        sizer_left_panel.Add(self.button_open_scoring, 0, wx.EXPAND, 0)
        sizer_right_panel.Add(sizer_fragments_plots, 1, wx.EXPAND, 10)
        self.main_panel.SetSizer(sizer_main)

        #Events initialization
        self.Bind(wx.EVT_BUTTON, self.OnLoadFromTxt, self.button_load_ms_file)
        self.Bind(wx.EVT_BUTTON, self.OnGenerateIsoformClick, self.button_generate_IT)
        self.Bind(wx.EVT_BUTTON, self.OnLoadConfigButton, self.button_load_config_file)
        self.Bind(wx.EVT_BUTTON, self.OnAnnotateSpectraClick, self.button_annotate_spectrum)
        self.Bind(wx.EVT_BUTTON, self.OnProbWindowClick, self.button_open_scoring)
        self.Bind(wx.EVT_BUTTON, self.OnFragmentMapShowClick, self.button_series_show)
        self.Bind(wx.grid.EVT_GRID_LABEL_LEFT_CLICK, self.OnGridRowSelected, self.grid_IT)
        self.Bind(wx.grid.EVT_GRID_LABEL_RIGHT_CLICK, self.OnGridRowEditClick, self.grid_IT)

        #Pub initialization
        cid = self.figure_fragment_map.canvas.mpl_connect('button_press_event', self.MPLOnclick_fragmentmap)
        pub.subscribe(self.Listener, "root_topic")

        #Interface tweaks
        self.button_series_show.Disable()
        self.grid_IT.CreateGrid(1, 1)

        tcFont = self.textctrl_isoform_encoder.GetFont()
        tcFont.SetFamily( wx.FONTFAMILY_TELETYPE )
        self.textctrl_isoform_encoder.SetFont( tcFont )


        self.Layout()
        self.PropertyGridWriteParams()
        self.Refresh()
        self.grid_IT.Refresh()

    def OnFragmentMapShowClick(self, event):
        cur_serie = self.combobox_series_show.GetStringSelection()
        for i in range(len(self.IT.series)):
            if str(self.IT.series[i]) == cur_serie:
                idx = i
        self.FragmentPlotter(idx)

    def OnProbWindowClick(self, event):
        prob_window = ProbabilitiesFrame(parent=self, id=-1)
        prob_window.IT_Transfer(self.IT)

    def ModifySerieSequencesInIT(self, serie):
        for k in range(len(self.IT.series)):
            if str(self.IT.series[k]) == str(serie):
                for q in range(len(serie.seqs_of_intact_ppts)):
                    self.IT.series[k].seqs_of_intact_ppts[q] = serie.seqs_of_intact_ppts[q]
                self.IT.series[k].seq_of_fragmenting_unit = serie.seq_of_fragmenting_unit
        print(str(serie))
        return 0

    def Listener(self, arg1):
        self.ModifySerieSequencesInIT(arg1)


    def OnLoadConfigButton(self, event):  # wxGlade: MyFrame.<event_handler>
        with wx.FileDialog(self, "Open Config File", wildcard="Config TXT file|*.txt",
                           style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return 0  #
            self.cfgpathname = fileDialog.GetPath()
            f = open(self.cfgpathname)
            lf = f.readlines()
            s = "".join(lf)
            self.textctrl_isoform_encoder.SetValue(s)
            self.sb.SetStatusText('Config file loaded')

    def ImportPptListFromEditor(self, loaded_text):
        current_tag = ""
        lf = loaded_text.split("\n")
        self.I_list = []
        self.ppts = {}
        for cur_s in lf:
            if len(cur_s) < 1:
                continue
            if cur_s[-1] == "\n":
                s = cur_s[:-1]
            else:
                s = cur_s
            if s[0] == ">":
                current_tag = s[1:]
            else:
                seqs = s.split(";")
                if current_tag == "Isf":
                    isf_name = seqs[0]
                    isf_encode = seqs[1]
                    self.I_list.append(backend.I(isf_name, isf_encode, self.ppts))
                if current_tag == "Ppt":
                    ppt_name = seqs[0]
                    ppt_seq = seqs[1]
                    self.ppts[ppt_name] = backend.Ppt(ppt_name, ppt_seq)
        #self.PptListUpdate()
        #self.IsfListUpdate()

    def MPLOnclick_fragmentmap(self, event):
        if event.dblclick:
            self.OnPlotFragment(int(event.xdata + 0.5), int(event.ydata + 0.5))

    def OnGridRowEditClick(self, event):
        idx = event.GetRow()
        secondWindow = EditorFrame(parent=self, id=-1)
        secondWindow.WriteSerieToIsfTree(self.IT.series[idx])
        #secondWindow.Show()

    def OnGridRowSelected(self, event):
        idx = event.GetRow()
        self.FragmentPlotter(idx)

    def OnPlotFragment(self, x, y):
        params = self.GetManagingProperties()
        serie_name = self.current_serie_name
        f = x
        z = y
        for current_serie in self.IT.series:
            if str(current_serie) == serie_name:
                cserie = current_serie
        b = cserie.fragment_mass_calculator(x, y)
        b = backend.remove_isotopes(b)
        #ac = self.annotation_param[2][1]
        ac = params["mz_accuracy"]
        identified_isotopes = self.operating_mass_spectra.peak_detection(b[:, 0], ac, enter_mz_values=True)
        self.axes_spectrum.clear()
        nrm = np.max(self.operating_mass_spectra.intensities)
        self.axes_spectrum.plot(self.operating_mass_spectra.mz, self.operating_mass_spectra.intensities)
        for i in range(len(identified_isotopes[0])):
            mz = identified_isotopes[0][i]
            if identified_isotopes[1][i] == 0.0:
                self.axes_spectrum.plot([mz, mz], [0, nrm], "r--")
            else:
                self.axes_spectrum.plot([mz, mz], [0, nrm], "g--")
        dx_min = np.min(identified_isotopes[0])
        dx_plus = np.max(identified_isotopes[0])
        dx_average = np.average(identified_isotopes[0])
        self.axes_spectrum.set_xlim(dx_average - (dx_average - dx_min) * 3, dx_average + (dx_plus - dx_average) * 3)
        self.axes_spectrum.set_ylim(0, identified_isotopes[2] * 2)
        self.canvas_spectrum.draw()


    def PropertyGridWriteParams(self):
        self.mgprop = {}
        self.propgrid_processing_control.Append(wx.propgrid.PropertyCategory("MS Peak Detection"))
        self.mgprop["peak_threshold"] = self.propgrid_processing_control.Append(
            wx.propgrid.FloatProperty("Intensity threshold", value=0.002))
        self.propgrid_processing_control.Append(wx.propgrid.PropertyCategory("Fragment Annotation"))
        self.mgprop["mz_accuracy"] = self.propgrid_processing_control.Append(
            wx.propgrid.FloatProperty("m/z accuracy", value=0.003))
        self.mgprop["isotope_scores_sgo"] = self.propgrid_processing_control.Append(
            wx.propgrid.FloatProperty("CP1", value=0.25))
        self.mgprop["isotope_scores_cutoff"] = self.propgrid_processing_control.Append(
            wx.propgrid.FloatProperty("CP2", value=1.0))
        self.mgprop["max_z"] = self.propgrid_processing_control.Append(wx.propgrid.IntProperty("max Z", value=25))
        self.propgrid_processing_control.FitColumns()

    def GetManagingProperties(self):
        res = {}
        for k in self.mgprop:
            res[k] = self.mgprop[k].GetValue()
        return res

    def LoadSpectra(self):
        params = self.GetManagingProperties()
        self.sb.SetStatusText('Loading spectrum ...')
        self.axes_spectrum.clear()
        self.operating_mass_spectra = backend.InternalMassSpectrum(2000, 0.001)
        self.operating_mass_spectra.load_calibrated_MS_spectra_from_txt(self.pathname, parentZ=params["max_z"])
        self.axes_spectrum.plot(self.operating_mass_spectra.mz, self.operating_mass_spectra.intensities)
        self.figure_spectrum.canvas.draw()
        self.sb.SetStatusText('Loading spectrum done')

    def OnLoadFromTxt(self, event):  # wxGlade: MyFrame.<event_handler>
        with wx.FileDialog(self, "Open TD-MS data", wildcard="x-y spectrum | *.*",
                           style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST) as fileDialog:
            if fileDialog.ShowModal() == wx.ID_CANCEL:
                return 0  #
            self.pathname = fileDialog.GetPath()
            self.LoadSpectra()

    def OnExit(self, event):  # wxGlade: MyFrame.<event_handler>
        print("Event handler 'OnExit' not implemented!")
        event.Skip()

    def OnPptAddClick(self, event):
        ppt_name = self.textctrl_PptName.GetValue()
        ppt_seq = self.textctrl_PptSeq.GetValue()
        self.textctrl_PptName.SetValue("")
        self.textctrl_PptSeq.SetValue("")
        self.ppts[ppt_name] = backend.Ppt(ppt_name, ppt_seq)
        self.PptListUpdate()

    def FragmentPlotter(self, idx):
        #self.fragment_map.clf()
        current_serie_name = self.grid_IT.GetRowLabelValue(idx)
        for serie in self.IT.series:
            if str(serie) == current_serie_name:
                current_serie = serie
        self.current_serie_name = current_serie_name
        self.axes_fragment_map.set_title(str(current_serie))
        if self.ims != None:
            self.axes_fragment_map.imshow(self.IT.CP_values[current_serie], aspect="equal", cmap='plasma',
                                          vmax=1, vmin=0)
        else:
            self.ims = self.axes_fragment_map.imshow(self.IT.CP_values[current_serie], aspect="equal",
                                                     cmap='plasma', vmax=1, vmin=0)
            self.figure_fragment_map.colorbar(self.ims)
        self.canvas_fragment_map.draw()
        self.PlotAnnotateFragment(idx)

    def FragmentPlotter2(self, idx):
        #self.fragment_map.clf()
        current_serie_name = self.grid_IT.GetRowLabelValue(idx)
        for serie in self.IT.series:
            if str(serie) == current_serie_name:
                current_serie = serie
        self.current_serie_name = current_serie_name
        self.axes_fragment_map.set_title(str(current_serie))
        if self.ims != None:
            self.axes_fragment_map.imshow(self.IT.CP_values[current_serie], aspect="equal", cmap='plasma',
                                          vmax=1, vmin=0)
        else:
            self.ims = self.axes_fragment_map.imshow(self.IT.CP_values[current_serie], aspect="equal",
                                                     cmap='plasma', vmax=1, vmin=0)
            self.figure_fragment_map.colorbar(self.ims)
        self.canvas_fragment_map.draw()
        self.PlotAnnotateFragment(idx)

    def OnAddIsoformClick(self, event):
        isf_name = self.textctrl_IsfName.GetValue()
        isf_encode = self.textctrl_IsfSeq.GetValue()
        self.textctrl_IsfName.SetValue("")
        self.textctrl_IsfSeq.SetValue("")
        self.I_list.append(backend.I(isf_name, isf_encode, self.ppts))
        self.IsfListUpdate()

    def CreateGrid(self):
        ncols = self.grid_IT.GetNumberCols()
        nrows = self.grid_IT.GetNumberRows()
        self.grid_IT.DeleteCols(numCols=ncols)
        self.grid_IT.DeleteRows(numRows=nrows)
        self.grid_IT.AppendRows(len(self.IT.series))
        self.grid_IT.AppendCols(len(self.IT.isoforms_names))
        for k in range(len(self.IT.series)):
            self.grid_IT.SetRowLabelValue(k, str(self.IT.series[k]))
            self.grid_IT.SetRowLabelSize(wx.grid.GRID_AUTOSIZE)
        for k in range(len(self.IT.isoforms_names)):
            self.grid_IT.SetColLabelValue(k, self.IT.isoforms_names[k])
        for i in range(len(self.IT.series)):
            for j in range(len(self.IT.isoforms_names)):
                try:
                    value = str(self.IT.table_of_fragments[i][self.IT.isoforms_names[j]])
                except KeyError:
                    value = "N/A"
                self.grid_IT.SetCellValue(i, j, value)

        self.grid_IT.ForceRefresh()

    def OnAnnotateSpectraClick(self, event):
        self.sb.SetStatusText('Spectrum annotation processing ...')
        params = self.GetManagingProperties()
        maxZ = params["max_z"]
        mass_accuracy = params["mz_accuracy"]
        cutoff = params["isotope_scores_cutoff"]
        sgo = params["isotope_scores_sgo"]
        self.operating_mass_spectra.find_peaks(height=params["peak_threshold"])
        self.IT.annotate_fragment(self.operating_mass_spectra, mass_accuracy=mass_accuracy, maxZ=maxZ)
        choices = []
        for s in self.IT.series:
            self.IT.evaluation_function(s, CP2=cutoff, CP1=sgo)
            self.IT.gamma_compute(s)
            #choices.append(str(s))
            self.combobox_series_show.Append(str(s))
        self.button_series_show.Enable()
        self.sb.SetStatusText('Spectrum annotation processing done')

        return 0

    def OnGenerateIsoformClick(self, event):
        text_table = self.textctrl_isoform_encoder.GetValue()
        self.ImportPptListFromEditor(text_table)
        for i in range(len(self.I_list)):
            if self.checkbox_a.GetValue():
                self.I_list[i].generate_series_of_fragment("a")
            if self.checkbox_b.GetValue():
                self.I_list[i].generate_series_of_fragment("b")
            if self.checkbox_c.GetValue():
                self.I_list[i].generate_series_of_fragment("c")
            if self.checkbox_x.GetValue():
                self.I_list[i].generate_series_of_fragment("x")
            if self.checkbox_y.GetValue():
                self.I_list[i].generate_series_of_fragment("y")
            if self.checkbox_z.GetValue():
                self.I_list[i].generate_series_of_fragment("z")
        self.IT = backend.IsoformTable(self.I_list)
        self.CreateGrid()

    def PlotAnnotateFragment(self, idx):
        #self.axes_fragment_detected.set_axis_off()
        self.axes_seq_coverage.clear()
        self.axes_seq_coverage.set_axis_off()
        serie = self.IT.series[idx]
        serie_seq = self.IT.series[idx].seq_of_fragmenting_unit
        f_type = serie.f_type
        if f_type == "N":
            det_frag = self.IT.Q[serie]
        elif f_type == "C":
            det_frag = self.IT.Q[serie][::-1]
        nx = 70
        ny = 5
        #self.IT.series[idx].fra
        for k in range(len(serie_seq)):
            x = k % 15
            y = k // 15
            if det_frag[k] == 1:
                if f_type == "N":
                    self.axes_seq_coverage.plot([x + 0.5, x + 1, x + 1], [1 - y, 1 - y, 0.5 - y], "b")
                elif f_type == "C":
                    self.axes_seq_coverage.plot([x, x, x + 0.5], [0.5 - y, 0 - y, 0 - y], "g")
            self.axes_seq_coverage.text(x + 0.5, 0.4 - 1 * y, serie_seq[k],
                                        horizontalalignment='center',
                                        verticalalignment='center',
                                        fontfamily='monospace',
                                        fontstretch="extra-expanded",
                                        fontsize=10)
        self.axes_seq_coverage.set_ylim(-12.2, 1.2)
        self.axes_seq_coverage.set_xlim(-1.2, 15.2)
        self.canvas_seq_coverage.draw()

    #def OnCalculatePropbabilitiesClcik(self, event):


class EditorFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((720, 240))
        self.panel = wx.Panel(self, -1)
        self.isoform_sequences_tree = PropertyGrid(self.panel, wx.ID_ANY)
        self.update_button = wx.Button(self.panel, wx.ID_ANY, "Update")
        self.Bind(wx.EVT_BUTTON, self.OnSaveButtonClick, self.update_button)
        #self.SetSize((720, 180))
        self.SetBackgroundColour(wx.Colour(100, 100, 100))
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_main.Add(self.isoform_sequences_tree, 1, wx.EXPAND, 0)
        sizer_main.Add(self.update_button, 0, wx.EXPAND, 0)
        #self.WriteSerieToIsfTree(kwds['serie'])
        self.panel.SetSizer(sizer_main)
        self.panel.SetFocus()
        self.Show(True)
        #print(self.IsActive())
        #self.Iconize(False)
        #self.Raise()

    def WriteSerieToIsfTree(self, serie):
        self.original_serie = serie
        self.isoform_sequences_tree.Append(wx.propgrid.PropertyCategory("Intact Isoform Sequences"))
        self.intact_tree_indexes = []
        for i in range(len(serie.seqs_of_intact_ppts)):
            s = serie.seqs_of_intact_ppts[i]
            self.intact_tree_indexes.append(
                self.isoform_sequences_tree.Append(wx.propgrid.StringProperty("Seq " + str(i), value=s)))
        self.isoform_sequences_tree.Append(wx.propgrid.PropertyCategory("Fragmenting Isoform Sequence"))
        s = serie.seq_of_fragmenting_unit
        self.frag_seq_idx = self.isoform_sequences_tree.Append(wx.propgrid.StringProperty("Frag Seq", value=s))
        self.isoform_sequences_tree.FitColumns()

    def OnSaveButtonClick(self, event):
        editing_serie = self.original_serie
        for k in range(len(self.intact_tree_indexes)):
            val = self.intact_tree_indexes[k].GetValue()
            editing_serie.seqs_of_intact_ppts[k] = val
        val = self.frag_seq_idx.GetValue()
        editing_serie.seq_of_fragmenting_unit = val
        pub.sendMessage("root_topic", arg1=editing_serie)


class ProbabilitiesFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((1200, 600))
        self.panel = wx.Panel(self, -1)
        self.prob_props = PropertyGrid(self.panel, wx.ID_ANY)
        self.report_text = wx.TextCtrl(self.panel, wx.ID_ANY, "", style=wx.TE_MULTILINE)
        self.update_button = wx.Button(self.panel, wx.ID_ANY, "Calculate Scores")
        self.fig_prob_map = Figure(figsize=(1, 1), layout="constrained")
        self.axes_prob_map = self.fig_prob_map.add_subplot(111)
        self.canvas_prob_map = FigureCanvas(self.panel, wx.ID_ANY, self.fig_prob_map)
        self.toolbar = NavigationToolbar2Wx(self.canvas_prob_map)
        #self. = wx.Button(self.panel, wx.ID_ANY,"Update")

        self.Bind(wx.EVT_BUTTON, self.OnCalculateClick, self.update_button)
        self.SetBackgroundColour(wx.Colour(100, 100, 100))
        sizer_main = wx.BoxSizer(wx.HORIZONTAL)
        sizer_left_col = wx.BoxSizer(wx.VERTICAL)
        sizer_right_col = wx.BoxSizer(wx.VERTICAL)
        sizer_right_col.Add(self.toolbar, 0, wx.EXPAND, 0)
        sizer_right_col.Add(self.canvas_prob_map, 1, wx.EXPAND, 0)
        sizer_left_col.Add(self.prob_props, 1, wx.EXPAND, 0)
        sizer_left_col.Add(self.update_button, 0, wx.EXPAND, 0)
        sizer_left_col.Add(self.report_text, 3, wx.EXPAND, 0)
        sizer_main.Add(sizer_left_col, 1, wx.EXPAND, 0)
        sizer_main.Add(sizer_right_col, 1, wx.EXPAND, 0)

        self.Bind(wx.EVT_BUTTON, self.OnCalculateClick, self.update_button)
        self.PropertyGridWriteParams()
        #self.WriteSerieToIsfTree(kwds['serie'])
        self.panel.SetSizer(sizer_main)
        self.panel.SetFocus()
        self.Show(True)

    def GetManagingProperties(self):
        res = {}  #data={"T":"r",'folder':params["fid_folder"]}
        for k in self.mprop:
            res[k] = self.mprop[k].GetValue()
        print(res)
        return res

    def PropertyGridWriteParams(self):
        self.mprop = {}
        self.prob_props.Append(wx.propgrid.PropertyCategory("Calculation parameters"))
        self.mprop["alpha_value"] = self.prob_props.Append(wx.propgrid.FloatProperty("Alpha value", value=0.05))
        self.mprop["beta_value"] = self.prob_props.Append(wx.propgrid.FloatProperty("Beta value", value=0.1))
        self.prob_props.Append(wx.propgrid.PropertyCategory("Plot parameters"))
        self.mprop["labels"] = self.prob_props.Append(wx.propgrid.BoolProperty("Show label", value=False))
        self.mprop["sparse"] = self.prob_props.Append(wx.propgrid.IntProperty("Sparse labels by", value=1))
        self.prob_props.FitColumns()

    def IT_Transfer(self, IT):
        self.IT = IT

    def BayessianPlotter(self):
        params = self.GetManagingProperties()
        self.axes_prob_map.clear()
        for k in range(len(self.IT.r_matrix[0])):
            self.axes_prob_map.plot(self.IT.r_matrix[:, k] + k * 0.001, "o--", label=self.IT.isoforms_names[k],
                                    markersize=2)
        if params["labels"]:
            n = params["sparse"]
            ind_arr = []
            text_arr = []
            for k in range(len(self.IT.ticks_array)):
                ind_arr.append(k)
                if k % n == 0:
                    text_arr.append(self.IT.ticks_array[k])
                else:
                    text_arr.append("")
            self.axes_prob_map.set_xticks(ind_arr, text_arr, rotation='vertical')
        self.axes_prob_map.set_ylim(0, 1)
        self.axes_prob_map.legend()
        self.canvas_prob_map.draw()

    def OnCalculateClick(self, event):
        params = self.GetManagingProperties()
        alpha_value = params["alpha_value"]
        beta_value = params["beta_value"]
        self.IT.compute_Pmatrix()
        self.IT.compute_Pt_matrix(alpha=alpha_value, beta=beta_value, consider_gamma=True)
        self.IT.compute_probabilies()
        self.BayessianPlotter()
        report_string = "\n".join(self.IT.report_strings)
        self.report_text.SetValue(report_string)
        #self.IT.bayesian_show()
        #print(self.IT.r_matrix[-1,:])
        return 0


# end of class MyFrame

class MyApp(wx.App):
    def OnInit(self):
        self.frame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        #main_sizer =
        #self.btn =
        return True

    def OnModifySequences(self):
        parent = self.GetParent()


# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
